<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:p="http://www.springframework.org/schema/p" 
        xmlns:cache="http://www.springframework.org/schema/cache"  
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:context="http://www.springframework.org/schema/context"  
        xmlns:mvc="http://www.springframework.org/schema/mvc"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
                            http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.1.xsd 
                            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd                         
                            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
                 >  
    <!-- 开启redis注解支持 -->
 <!--    <cache:annotation-driven />  -->
    <!-- 自动扫描Spring注解配置  并保证@Required,@Autowired的属性被注入--> 
    <context:component-scan base-package="com.*,com.account.*.*" /> 
	<!-- 自动加载属性配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/> 
    
   <!--  提供方应用名称信息，这个相当于起一个名字，我们dubbo管理页面比较清晰是哪个应用暴露出来的 -->
 <!--   <dubbo:application name="dubbo_provider"></dubbo:application> -->
   <!--      使用zookeeper注册中心暴露服务地址   -->
 <!--   <dubbo:registry address="zookeeper://119.29.5.86:2181" check="false" subscribe="false" register=""></dubbo:registry> -->
   <!--       要暴露的服务接口   -->
 <!--   <dubbo:service interface="com.service.AdUserService" ref="userService" />  -->
 
       
    <!-- 配置数据源：使用阿里的druid方式   支持大数据实时查询和分析的高容错、高性能开源分布式系统--> 
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
    init-method="init" destroy-method="close"> 
           <!-- 数据库基本信息配置 -->  
       <property name="url" value="${url}" />    
       <property name="username" value ="root" />    
       <property name="password" value ="715292834" />    
       <!-- 可以不配置  自动检测 -->
       <property name = "driverClassName" value = "${jdbc.driverClassName}" /> 
       <!-- 监控统计用的filter:stat  日志用的filter:log4j  防御sql注入的filter:wall -->   
       <property name = "filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />  
       <!-- 检查sql是否有效 -->  
       <property name = "validationQuery" value = "${validationQuery}" />    
       <property name = "testWhileIdle" value = "${testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${testOnBorrow}" /> 
       <!-- 归还连接时检查validationQuery是否有效  打开会影响性能-->  
      <!--  <property name = "testOnReturn" value = "${testOnReturn}" />    --> 
       <!-- 是否缓存poolPreparedStatements,oracle建议开启 性能提升大 ,mysql建议关闭 -->
       <property name = "poolPreparedStatements" value ="${poolPreparedStatements}" />
       <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned功能    超过时间限制是否回收 -->  
       <property name = "removeAbandoned" value = "${removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />  
       <!-- 关闭 或打开abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${logAbandoned}" /> 
    </bean>
    
        <!-- Freemarker配置 -->  
		<bean id="freemarkerConfig"  
		      class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
		    <property name="templateLoaderPath" value="/WEB-INF/jsp/" />  
		    <property name="freemarkerSettings">  
		        <props>  
		            <prop key="template_update_delay">0</prop>  
		            <prop key="default_encoding">UTF-8</prop>  
		            <prop key="number_format">0.##########</prop>  
		            <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
		            <prop key="classic_compatible">true</prop>  
		            <prop key="template_exception_handler">ignore</prop>  
		        </props>  
		    </property>  
		</bean>
    
    
        <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
            <property name="dataSource" ref="dataSource" />   
        </bean>  
   
      
        <!-- (配置事务管理) -->  
        <bean id="transactionManager"  
            class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
            <property name="dataSource" ref="dataSource" />  
        </bean>  
 		   
      <tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="batch*" propagation="REQUIRED"/>
			</tx:attributes>
	  </tx:advice>
	  <aop:config>
			<aop:pointcut id="mypointcut" expression="execution(* com.service.*.*(..))" />
			<aop:advisor advice-ref="txAdvice" pointcut-ref="mypointcut" />
	  </aop:config>  
	  
	<!-- redis配置 -->
<!-- 	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
          <property name="maxIdle" value="${redis.maxIdle}" />
          <property name="maxWaitMillis" value="${redis.maxWait}" />
          <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean >  --> 
	<!-- redis服务器中心 -->
<!--      <bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
          <property name="poolConfig" ref="poolConfig" />
          <property name="port" value="${redis.port}" />
          <property name="hostName" value="${redis.host}" />
          <property name="password" value="${redis.password}" />
          <property name="timeout" value="${redis.timeout}" ></property>
    </bean >
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
          <property name="connectionFactory" ref="connectionFactory" />
          <property name="keySerializer" >
              <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
          </property>
          <property name="valueSerializer" >
              <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
          </property>
    </bean>  -->
    <!-- 配置缓存 -->  
<!--    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">  
       <constructor-arg ref="redisTemplate" />  
   </bean>  --> 
    


      
</beans>  